/*
Napisati program koji iz datoteke čita postfiks izraz i zatim stvara stablo proračuna. Iz
gotovog stabla proračuna upisati u datoteku infiks izraz.
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct cvor tree;
typedef struct cvor* pozicija;
typedef struct stog* Stog;

struct cvor {
	char el[12];
	pozicija L;
	pozicija R;
};

struct stog {
	Stog next;
	pozicija stablo;
};

int push(Stog, char*);
int pop(Stog, char*);
int StvoriStablo(char*, Stog);
int print(pozicija, FILE*);
pozicija StvoriNoviCvorStabla();
Stog StvoriNoviCvorStoga();
int BrisiStablo(pozicija);

int main() {
	Stog H, tmp;
	char fileName[255];
	FILE* out_file; //file u koji spremam na kraju

	H = (Stog)malloc(sizeof(struct stog)); //alociram mem. za head stoga
	H->next = NULL;
	H->stablo = NULL;

	printf("upisi ime datoteke: ");
	scanf("%s", fileName);
	StvoriStablo(fileName, H); //stvara stablo

	out_file = fopen("infix.txt", "w");

	//ako postoji clan na stogu u njemu je stablo
	//provjera da se dobro otvori file
	if (H->next != NULL && out_file != NULL) {
		printf("Infix izraz spremljen je u file infix.txt\n");
		print(H->next->stablo, out_file); //u file sprema stablo na kojeg pokazuje jedini clan na stogu
	}


	while (H != NULL && H->next != NULL) {
		tmp = H->next;
		H->next = tmp->next;
		BrisiStablo(tmp->stablo);
		free(tmp);
	}

	free(H);
	fclose(out_file);

	return 0;
}

Stog StvoriNoviCvorStoga() {
	//stvara strukturu za na stog
	Stog q;
	q = (Stog)malloc(sizeof(struct stog));
	return q;
}
pozicija StvoriNoviCvorStabla() {
	//stvara jedan cvor stabla
	pozicija q;
	q = (pozicija)malloc(sizeof(tree));
	return q;
}

//inorder ispis
int print(pozicija S, FILE* out_file) {
	if (S == NULL)
		return 1;
	else {
		print(S->L, out_file);
		printf("%s ", S->el); //ispis na ekran
		fprintf(out_file, "%s ", S->el); //upisuje u datoteku
		print(S->R, out_file);
		return 0;
	}

}

//procitali smo broj iz datoteke
int push(Stog H, char* br) {
	Stog q;
	q = StvoriNoviCvorStoga(); //stvaram novu strukturu za na stog

	//ako je alocirana memorija
	if (q != NULL) {
		q->next = H->next; //stavljam na pocetak liste(vrh stoga) i povezem
		H->next = q;
		q->stablo = StvoriNoviCvorStabla(); //kreiram novi cvor stabla na koji pokazuje struktura sa stoga
		//ako je alocirana memorija
		if (q->stablo != NULL) {
			strcpy(q->stablo->el, br); //u el upisujem broj kao string
			q->stablo->L = NULL; //postavljam djecu na NULL
			q->stablo->R = NULL;
			return 0;
		}
		else return 1;
	}
	else return 1;
}
int pop(Stog H, char* op) {
	pozicija q = StvoriNoviCvorStabla();		//stvaram cvor stabla na koji pokazuje q
	Stog tmp;		//pointer na struct stog

	//ako je alocirana memorija
	if (q != NULL) {
		strcpy(q->el, op);		//kopiram operator u element cvora stabla
		if (H->next != NULL) {		//ako postoji nesto na stogu
			q->R = H->next->stablo;			//ono na sta struktura na vrhu stoga pokazuje postaje desno dijete operatora
			if (H->next->next != NULL) {		//ako postoji i druga struktura na stogu
				q->L = H->next->next->stablo;		//ono na sta druga struktura stoga pokazuje postaje lijevo dijete operatora
				tmp = H->next;		//moram prespojit prvi clan liste i obrisat ga
				H->next = tmp->next;
				free(tmp);
				H->next->stablo = q;
				return 0;
			}
			else return 1;
		}
		else return 1;
	}
	else return 1;
}

int StvoriStablo(char* fileName, Stog H) {
	FILE* f;
	char buff[255];

	f = fopen(fileName, "r");
	//ako je uspjesno otvoren file
	if (f != NULL) {
		//sve dok ne dodjem do kraja
		while (!feof(f)) {
			fscanf(f, "%s ", buff); //povlacim string po string(odvojeni " ")
			if (strcmp(buff, "+") == 0 || strcmp(buff, "-") == 0 || strcmp(buff, "*") == 0 || strcmp(buff, "/") == 0) {
				//ako smo nasli operaciju ulazimo u pop
				pop(H, buff);
			}
			else
				push(H, buff); //ako smo nasli broj(ne operacija) ulazim u push tj. dodam novi element na stog
		}
		return 0;
	}
	else {
		printf("nije uspjesno otvoren file!\n");
		return 1;
	}
	fclose(f);
}

//oslobadjam dinamicki alociranu memoriju
int BrisiStablo(pozicija S) {
	if (S != NULL) {
		BrisiStablo(S->L); //ako ima lijevo brise ga, ako nema nista
		BrisiStablo(S->R);	//ako ima desno brise ga, ako nema nista
		free(S); //obrisemo root podstabla
		return 0;
	}
	return 1;
}

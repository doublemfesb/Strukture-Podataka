
/*
Napisati program koji omogućava rad s binarnim stablom pretraživanja. Treba
omogućiti unošenje novog elementa u stablo, ispis elemenata, brisanje i pronalaženje
nekog elementa.
*/
#define CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
#include<time.h>
#include<conio.h>
#ifndef GRESKA
#define GRESKA -1
#endif

#ifndef SUCCESS
#define SUCCESS 0
#endif
enum _TREE_PRINT { INORDER = 1, PREORDER, POSTORDER };
struct CvorStabla;
typedef struct cvorStabla Cvor;
typedef struct CvorStabla* Stablo;
typedef struct CvorStabla* Pozicija;
struct CvorStabla
{
	int El;
	Stablo Lijevo;
	Stablo Desno;
};

typedef enum _Choice {
	INSERT = 1,
	

} Choice;

Stablo StvoriPrazno(Stablo S);
Pozicija Trazi(int X, Stablo S);
Stablo Dodaj(int X, Stablo S);
Stablo Brisi(int X, Stablo S);
int Ispis(Stablo S);
Pozicija TraziMin(int X, Stablo S);

int main() 
{
	Pozicija root = NULL, temp;
	int odabir = 0, X;
	while (odabir != 8)
	{
		system("cls");
		printf("\n\tOdaberi akciju:");
		printf("\n\t\t 1 -unos novog elementa");
		printf("\n\t\t 2 -ispis stabla");
		printf("\n\t\t 3 -trazenje elementa");
		printf("\n\t\t 4 -brisanje elementa");
		printf("\n\t\t 5 -trazenje min. elementa");
		printf("\n\t\t 6 -brisanje stabla");
		printf("\n\t\t 8 -kraj\n\t");

		scanf(" %d", &odabir); switch (odabir)
		{
		case INSERT:
			printf("\n\tUnesi element: ");
			scanf(" %d", &X);
			root = Dodaj(X, root);
			break;
		case 2:system("cls");
			Ispis(root);
			break;
		case 3:printf("\n\tKoji element trazis?   ");
			scanf(" %d", &X);
			temp = Trazi(X, root); 
			if (temp != NULL)
				printf("Element %d se nalazi na adresi %d", temp->El, temp);
			break;
		case 4:printf("\n\tKoji element zelis izbrisat?   ");
			scanf(" %d", &X); root = Brisi(X, root);
			break;
		case 5:temp = TraziMin(X, root);
			printf("Minimalni element je %d", temp->El);
			break;
		case 6:
			root = StvoriPrazno(root);
		case 8:
			break;
		default:printf("\n\tKrivi unos!!!");
		}
		printf("\nPress any key to continue!");
		getch();
	}
}

Pozicija Trazi(int X, Stablo S)
{
	if (NULL == S)
	{
		printf("\n\tElement ne postoji!!");
		return NULL;
	}
	else if (X < S->El)
		return Trazi(X, S->Lijevo);
	else if (X > S->El)
		return Trazi(X, S->Desno);
	else
		return S;
}

Pozicija TraziMin(int X, Stablo S)
{
	while (S!=NULL&&S->Lijevo != NULL)
		S = S->Lijevo;
	return S;
}

Stablo Dodaj(int X, Stablo S)
{
	if (NULL == S)
	{
		S = (Stablo)malloc(sizeof(struct CvorStabla));
		if (S == NULL) {
			printf("Greska pri alokaciji!");
			return NULL; //null jer je pointer
		}

		S->Lijevo = NULL;
		S->Desno = NULL;
		S->El = X;
	}
	else if (X > S->El)
		S->Desno = Dodaj(X, S->Desno);
	else if (X < S->El)
		S->Lijevo = Dodaj(X, S->Lijevo);
	else
		printf("Element vec postoji!");
	return S; 
}

Stablo Brisi(int X, Stablo S)
{
	Stablo temp;
	if (NULL == S)
		printf("Nismo pronasli element!");
	else if (X < S->El)
		S->Lijevo = Brisi(X, S->Lijevo); 
	else if (X > S->El)
		S->Desno = Brisi(X, S->Desno);
	else
	{ 
		if (S->Lijevo && S->Desno!=NULL)
		{
			temp = TraziMin(X, S->Desno);
			S->El = temp->El; 
			S->Desno = Brisi(S->El, S->Desno);
		}
		else
		{ 
			temp = S;
			if (NULL == S->Lijevo) 
			{ 
				S = S->Desno; 
			} 
			else if (NULL == S->Desno) 
			{ 
				S = S->Lijevo; 
			}
			free(temp);
		} 
	}
	return S;
}
int Ispis(int X, Pozicija S)
{
	switch (X)
	{
	case INORDER:
		{
			if (S != NULL)
			{
				Ispis(X, S->Lijevo);
				printf(" %d", S->El);
				Ispis(X, S->Desno);
			}
		}
		break;
	case PREORDER:
		{
			if (S != NULL)
			{
				printf(" %d", S->El);
				Ispis(X, S->Lijevo);
				Ispis(X, S->Desno);
			}
		}
		break;
	case POSTORDER:
		{
			if (S != NULL)
			{
				Ispis(X, S->Lijevo);
				Ispis(X, S->Desno);
				printf(" %d", S->El);
			}
		}
		break;
	}

	return SUCCESS;
}

Pozicija StvoriPrazno(Stablo S)
{ 
	if (NULL != S)
	{ 
		StvoriPrazno(S->Lijevo);
		StvoriPrazno(S->Desno);
		free(S); 
	}
	return NULL; 
}
